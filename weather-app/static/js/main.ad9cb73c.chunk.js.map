{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","cityA","value","countryA","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","class","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+QASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,eACA,wBAAIA,UAAU,6BAAd,yCCOOC,EATF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,YAC5C,2BAAOF,KAAK,OAAOC,KAAK,WAAWC,YAAY,eAC/C,iDC4BOC,EAjCC,SAAAN,GAAK,OAEjB,6BAEIA,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC5B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAKzDR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,cAK7CT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,YACd,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,WAI9CV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,cAI5CX,EAAMY,OAAS,uBAAGd,UAAU,kBAAb,IAAgCE,EAAMY,SCvBxDC,EAAU,mCA+EDC,E,2MA5EbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAETd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASC,MAAMC,MAC/Bf,EAAUS,EAAEG,OAAOC,SAASG,SAASD,MAHhC,SAIYE,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DC,EAA7D,oBAAgFK,IAJjG,cAILa,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMPrB,GAAQC,GACVqB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACbtB,YAAamB,EAAKI,KAAKC,KACvB1B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKM,IAAI1B,QACjBE,SAAUkB,EAAKI,KAAKtB,SACpBC,YAAaiB,EAAKO,QAAQ,GAAGxB,YAC9BC,MAAO,OAIRiB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACdtB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,cAzBE,4C,8HA8BX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACZ,kBAAC,EAAD,CAAMI,WAAYkC,KAAKlC,aACvB,kBAAC,EAAD,CACGO,YAAa2B,KAAKrB,MAAMN,YACxBF,KAAM6B,KAAKrB,MAAMR,KACjBC,QAAS4B,KAAKrB,MAAMP,QACpBE,SAAU0B,KAAKrB,MAAML,SACrBC,YAAayB,KAAKrB,MAAMJ,YACxBC,MAAOwB,KAAKrB,MAAMH,UAI1B,yBAAKyB,MAAM,UAAX,YAEE,uBAAGC,KAAK,kCAAR,yB,GA9DEC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLiB,QAAQjB,MAAMA,EAAM6C,c","file":"static/js/main.ad9cb73c.chunk.js","sourcesContent":["import React from\"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather App</h1>\r\n        <h3 className=\"title-container__subtitle\">my first app for studying API usage</h3>\r\n    </div>\r\n)\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"cityA\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"countryA\" placeholder=\"Country...\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    \r\n    <div>\r\n        { \r\n        props.city && props.country && <p className=\"weather__key\">Location: \r\n           <span className=\"weather__value\"> {props.city}, {props.country}</span>\r\n            </p>\r\n        }\r\n\r\n        { \r\n         props.temperature && <p className=\"weather__key\">Temperature: \r\n             <span className=\"weather__value\"> {props.temperature}</span>\r\n             </p>\r\n         }\r\n        \r\n        {\r\n         props.humidity && <p className=\"weather__key\">Humidity: \r\n             <span className=\"weather__value\"> {props.humidity}</span>\r\n             </p>\r\n         }\r\n        { \r\n        props.description && <p className=\"weather__key\">Description: \r\n            <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n        {\r\n         props.error && <p className=\"weather__error\"> {props.error}\r\n         </p>\r\n         }\r\n    </div>\r\n    \r\n);\r\n\r\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"95e986ed2c95c770288031d0b8d25f53\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.cityA.value;\n    const country = e.target.elements.countryA.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}uk&appid=${API_KEY}`);\n    const data = await api_call.json();\n    if (city && country){\n      console.log(data);\n      this.setState({\n       temperature: data.main.temp,\n       city: data.name,\n       country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n       error: \"\"\n    });\n    }\n    else{\n      console.log(data);\n      this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: \"error...\"\n    })\n    }\n  }\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                   <Form getWeather={this.getWeather}/>\n                   <Weather \n                      temperature={this.state.temperature}\n                      city={this.state.city}\n                      country={this.state.country}\n                      humidity={this.state.humidity}\n                      description={this.state.description}\n                      error={this.state.error}\n                    />\n                </div>\n              </div>\n              <div class=\"footer\">\n                Â© 2020 \n                <a href=\"https://quochuy2204.github.io/\"> quochuy2204</a>\n              </div>\n            </div>\n          </div>\n        </div>  \n      </div>\n    \n    );\n  }\n};\n\n\n        \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}